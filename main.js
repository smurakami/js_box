// Generated by CoffeeScript 1.6.3
(function() {
  var BOSS_SIZE, CHARA_SIZE, CHARA_SPEED, GAME_HEIGHT, GAME_WIDTH, global;

  enchant();

  CHARA_SIZE = 32;

  CHARA_SPEED = 1;

  GAME_WIDTH = 320;

  GAME_HEIGHT = 320;

  BOSS_SIZE = 32 * 16;

  global = this;

  window.onload = function() {
    var Bamboo, Boss, Box, HitBody, Hito, bamboo, bamboos, boss_walk_pos_x, boss_walk_pos_y, box_speed, game, hito, imgs, key, max_bamboo_num;
    bamboo = null;
    game = new Game(GAME_WIDTH, GAME_HEIGHT);
    game.fps = 60;
    imgs = {
      box: 'img/box.png',
      boss: 'img/boss.png',
      hito: 'img/chara.png',
      bamboo: 'img/bamboo.png'
    };
    for (key in imgs) {
      game.preload(imgs[key]);
    }
    HitBody = enchant.Class.create(enchant.Sprite, {
      initialize: function(subject, left, top, width, height) {
        enchant.Sprite.call(this, width, height);
        this.subject = subject;
        this.left = left;
        this.top = top;
        this.update();
        return game.rootScene.addChild(this);
      },
      update: function() {
        this.x = this.subject.x + this.left;
        return this.y = this.subject.y + this.top;
      },
      destroy: function() {
        game.rootScene.removeChild(this);
        return this.clearEventListener();
      }
    });
    box_speed = 2;
    Box = enchant.Class.create(enchant.Sprite, {
      initialize: function() {
        enchant.Sprite.call(this, CHARA_SIZE, CHARA_SIZE);
        this.x = GAME_WIDTH;
        this.y = Math.floor(Math.random() * GAME_HEIGHT);
        this.vy = Math.random() * box_speed - box_speed / 2;
        this.image = game.assets[imgs.box];
        this.addEventListener('enterframe', this.update);
        game.rootScene.addChild(this);
        return this.hitbody = new HitBody(this, 6, 4, 18, 25);
      },
      update: function() {
        var b, _i, _len;
        this.x -= box_speed;
        this.y += this.vy;
        this.frame = [0, 1, 0, 2][this.age % 4];
        for (_i = 0, _len = bamboos.length; _i < _len; _i++) {
          b = bamboos[_i];
          if (this.hitbody.intersect(b)) {
            this.destroy();
            b.destroy();
            return;
          }
        }
        if (this.x < 0 - this.width) {
          this.destroy();
          return;
        }
        if (this.y < 0 - this.width) {
          this.y = GAME_HEIGHT;
        }
        if (this.y > GAME_WIDTH) {
          this.y = -this.width;
        }
        if (this.hitbody.intersect(hito.hitbody)) {
          hito.damage();
        }
        return this.hitbody.update();
      },
      destroy: function() {
        game.rootScene.removeChild(this);
        this.hitbody.destroy();
        return this.clearEventListener();
      }
    });
    boss_walk_pos_x = [0, 80];
    boss_walk_pos_y = [-80, 0, 80];
    Boss = enchant.Class.create(enchant.Sprite, {
      initialize: function() {
        enchant.Sprite.call(this, BOSS_SIZE, BOSS_SIZE);
        console.log('boss');
        this.x = GAME_WIDTH - 60;
        this.y = 0;
        this.damage_counter = 0;
        this.image = game.assets[imgs.boss];
        this.addEventListener('enterframe', this.update);
        game.rootScene.addChild(this);
        this.hitbody = new HitBody(this, 11 * 16, 12 * 16, 3 * 16, 2 * 16);
        this.attackbody = new HitBody(this, 6 * 16, 4 * 16, 18 * 16, 25 * 16);
        this.standby = false;
        return this.tl.moveTo(0, 0, game.fps * 5).then(function() {
          return this.standby = true;
        });
      },
      update: function() {
        var b, _i, _len;
        this.frame = 0;
        if (this.damage_counter > 0) {
          this.frame = this.age % 6 < 3 ? 0 : 4;
          this.damage_counter--;
        }
        for (_i = 0, _len = bamboos.length; _i < _len; _i++) {
          b = bamboos[_i];
          if (this.hitbody.intersect(b)) {
            this.damage();
            b.destroy();
            return;
          }
        }
        if (this.attackbody.intersect(hito.hitbody)) {
          hito.damage();
        }
        if (this.standby) {
          this.walk();
        }
        this.attackbody.update();
        return this.hitbody.update();
      },
      walk: function() {
        var x, y;
        this.standby = false;
        x = boss_walk_pos_x[Math.floor(Math.random() * boss_walk_pos_x.length)];
        y = boss_walk_pos_y[Math.floor(Math.random() * boss_walk_pos_y.length)];
        return this.tl.moveTo(x, y, game.fps).then(function() {
          return this.standby = true;
        });
      },
      damage: function() {
        return this.damage_counter = 12;
      },
      destroy: function() {
        game.rootScene.removeChild(this);
        this.hitbody.destroy();
        this.attackbody.destroy();
        return this.clearEventListener();
      }
    });
    hito = null;
    Hito = enchant.Class.create(enchant.Sprite, {
      initialize: function() {
        enchant.Sprite.call(this, CHARA_SIZE, CHARA_SIZE);
        this.x = 2;
        this.y = Math.floor(GAME_HEIGHT / 2);
        this.image = game.assets[imgs.hito];
        this.prev_shot_button = false;
        this.damage_counter = 0;
        this.shot_counter = 0;
        this.addEventListener('enterframe', this.update);
        game.rootScene.addChild(this);
        return this.hitbody = new HitBody(this, 10, 3, 10, 25);
      },
      update: function() {
        if (game.input.up || game.input.down || game.input.left || game.input.right) {
          this.frame = [0, 4, 0, 5][Math.floor(this.age / 4) % 4];
        } else {
          this.frame = 0;
        }
        if (this.damage_counter > 0) {
          this.frame = this.age % 2 === 0 ? 3 : 7;
          this.damage_counter--;
        }
        if (this.shot_counter > 0) {
          this.frame = 1;
          this.shot_counter--;
        }
        if (game.input.up) {
          this.y -= CHARA_SPEED;
        }
        if (game.input.down) {
          this.y += CHARA_SPEED;
        }
        if (game.input.left) {
          this.x -= CHARA_SPEED;
        }
        if (game.input.right) {
          this.x += CHARA_SPEED;
        }
        if ((!this.prev_shot_button) && game.input.a) {
          this.shot_counter = 6;
          bamboo = new Bamboo(this.x + CHARA_SIZE, this.y + CHARA_SIZE / 2);
          this.to_shot_bamboo = false;
        }
        this.prev_shot_button = game.input.a;
        return this.hitbody.update();
      },
      damage: function() {
        return this.damage_counter = 20;
      }
    });
    bamboos = [];
    max_bamboo_num = 5;
    Bamboo = enchant.Class.create(enchant.Sprite, {
      initialize: function(x, y) {
        enchant.Sprite.call(this, 23, 3);
        this.x = x;
        this.y = y;
        this.image = game.assets[imgs.bamboo];
        this.addEventListener('enterframe', this.update);
        game.rootScene.addChild(this);
        return bamboos.push(this);
      },
      update: function() {
        this.x += 3;
        if (this.x > GAME_WIDTH) {
          return this.destroy();
        }
      },
      destroy: function() {
        var b, index, _i, _len;
        for (index = _i = 0, _len = bamboos.length; _i < _len; index = ++_i) {
          b = bamboos[index];
          if (b === this) {
            bamboos.splice(index, 1);
          }
        }
        game.rootScene.removeChild(this);
        return this.clearEventListener();
      }
    });
    game.onload = function() {
      game.rootScene.backgroundColor = "aqua";
      game.keybind(32, "a");
      global.boss = new Boss;
      hito = new Hito;
      game.rootScene.addEventListener('touchstart', function(e) {});
      game.rootScene.addEventListener('touchend', function(e) {});
      return setInterval(function() {
        return new Box;
      }, 500);
    };
    return game.start();
  };

}).call(this);
